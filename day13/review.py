"""
    面向对象:考虑问题,要从对象的角度出发.
            谁?干嘛?

    主要思想:
        识别对象/分配职责/建立交互
        封装变化/隔离变化/执行变化
          封装    继承    多态

    特征:
        封装:
            1) 数据:将多个基本类型,合成一个自定义类型.
                    优势:复合人类的思考方式
                    比如:学生,向量(x,y)

            2) 行为:对外提供简单的必要的功能,隐藏实现的细节.
                  优势:模块化开发,简化编程
                  比如:学生管理系统 -- 逻辑控制器,供界面调用.

            3) 设计:
                分而治之:分解需求,让多个类协同完成.
                封装变化:每个变化点单独做成一个类.
                -------------------------------
                高内聚:类的内部处理一个变化点
                低耦合:类与类的关系,尽量做到互不影响.

        继承:重用现有类的概念,并在此基础上进行扩展.
                  (子类的共性)      (子类相比父类更加具体)
            作用:隔离客户端代码与实现方式(隔离用与做)
            比如:交通工具隔离了人与飞机/火车...的变化
                 图形隔离了图形管理器与圆形/矩形...的变化

        多态:调用父一个方法,执行子类方法,不同实现方式不一样,所以表现形态就不一样.
            作用:通过重写执行不同变化点
            比如:人调用交通工具的运输方法,执行的是飞机/火车的运输方法
                图形管理器调用图形的计算面积方法,执行的是圆形/矩形的计算面积方法.

    原则:
        开闭原则:增加新功能,不修改客户端代码.
                比如:某个技能,增加新影响效果,只要创建新的效果类,不需要修改其他代码.
        单一职责:每个类有且只有一个改变的原因.
                比如:技能系统中,每个类的职责明确.
        依赖倒置:使用抽象(父),而不是用具体(子)
                比如:技能释放器,调用的是影响,而不是伤害生命/降低防御力..
        组合复用:使用关联关系,代替继承关系.
               比如:技能释放器与影响效果,使用了关联关系.
        里氏替换:父类出现的地方,可以被子类替换
                替换后,保持原有功能.
                比如:技能释放器使用影响效果,但可以被所有具体效果替换.
        迪米特法则:低耦合
                比如:影响效果的变化,不影响释放器.
                    每种效果之间,互不影响.
"""